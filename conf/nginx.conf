
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream kunkka {
        least_conn;
        server localhost:40001;
        server localhost:40002;
    }

    server {
        listen       80;
        server_name  acgv.fun;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # 自动跳转到HTTPS
        if ($server_port = 80) {
            rewrite ^(.*)$ https://$host$1 permanent;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        listen 443 ssl;                # 监听443端口, 开启ssl(必须)
        server_name acgv.fun;
        
        # ssl on;     # 不建议使用! 该指令与listen中ssl参数功能相同.
        # 引用ssl证书(必须,如果放在nginx/conf/ssl下可以用相对路径,其他位置必须用绝对路径)
        ssl_certificate      /home/ssl/domain.crt;
        ssl_certificate_key  /home/ssl/domain_nopass.key;

        # 协议优化(可选,优化https协议,增强安全性)
        ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers          ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
        ssl_prefer_server_ciphers  on;
        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  10m;

        location / {
            root   /home/server/lina;
            index  index.html index.htm;
        }

        location /api {
            proxy_pass http://kunkka;
        }
    }
}
